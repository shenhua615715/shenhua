<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="true">
    <contextName>logback-bigdata-admin</contextName>
    <!--这个./是输入日志到运行代码的当前路径的logs中-->
    <property name="logback.logdir" value="./logs"/>
    <property name="logback.appname" value="shenhua"/>

    <!--输出到控制台 ConsoleAppender-->
    <appender name="consoleLog" class="ch.qos.logback.core.ConsoleAppender">
        <!--展示格式 layout-->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%d{yyyy-MM-dd HH:mm:ss} %contextName [%thread] %-5level %logger{36} -- %msg%n</pattern>
        </layout>
        <!--如果只是想要 debug 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>debug</level>
        </filter>
    </appender>

    <!--输出到文件 RollingFileAppender-->
    <appender name="fileInfoLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>debug</level>
        </filter>
        <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
        如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
        的日志改名为今天的日期。即，<File> 的日志都是当天的。
        -->
        <File>${logback.logdir}/${logback.appname}.log</File>
        <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
            <FileNamePattern>${logback.logdir}/${logback.appname}.%d{yyyy-MM-dd}.log</FileNamePattern>
            <!--只保留最近90天的日志-->
            <maxHistory>90</maxHistory>
            <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
            <!--<totalSizeCap>1GB</totalSizeCap>-->
        </rollingPolicy>
        <!--日志输出编码格式化-->
        <encoder>
            <charset>UTF-8</charset>
            <pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>
        </encoder>
    </appender>
    <!--指定最基础的日志输出级别-->
    <root level="DEBUG">
        <!--appender将会添加到这个loger-->
        <appender-ref ref="consoleLog"/>
        <appender-ref ref="fileInfoLog"/>
    </root>
    
    <!-- 测试环境+开发环境. 多个使用逗号隔开. additivity为false的时候不会传递日志信息给root，而直接使用引用的appender-->
    <!-- 日志打印的顺序logger到root，root到appender,如果additivity为false那么这个root相当于没用-->
    <springProfile name="test,dev">
        <logger name="com.shenhua.web.controller" level="DEBUG" additivity="false">
            <appender-ref ref="consoleLog"/>
        </logger>
        <logger name="com.shenhua.service" level="DEBUG" additivity="false">
            <appender-ref ref="consoleLog"/>
        </logger>
    </springProfile>
    <!-- 生产环境. -->
    <springProfile name="prod">
    	<logger name="com.shenhua.web.controller" level="INFO" additivity="false">
            <appender-ref ref="fileInfoLog"/>
        </logger>
        <logger name="com.shenhua.service" level="INFO" additivity="false">
            <appender-ref ref="fileInfoLog"/>
        </logger>
    </springProfile>
</configuration>